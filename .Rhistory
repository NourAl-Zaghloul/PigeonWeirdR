# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(1728)
pigeon_dozenal(12*12*12)
pigeon_dozenal(12*12)
pigeon_dozenal(144)
pigeon_dozenal(145)
pigeon_dozenal(100)
84*12
8*12+4
pigeon_dozenal(100, base_from = 10, base_to = 12)
pigeon_dozenal(100, base_from = 10, base_to = 10)
pigeon_dozenal(100, base_from = 10, base_to = 11)
pigeon_dozenal(100, base_from = 10, base_to = 12)
pigeon_dozenal(108, base_from = 10, base_to = 12)
pigeon_dozenal(120, base_from = 10, base_to = 12)
pigeon_dozenal(132, base_from = 10, base_to = 12)
pigeon_dozenal(144, base_from = 10, base_to = 12)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(144, base_from = 10, base_to = 12)
pigeon_dozenal(144, base_from = 10, base_to = 11)
pigeon_dozenal(122, base_from = 10, base_to = 11)
pigeon_dozenal(121, base_from = 10, base_to = 11)
pigeon_dozenal(121, base_from = 10, base_to = 62)
pigeon_dozenal(62, base_from = 10, base_to = 62)
pigeon_dozenal(64, base_from = 10, base_to = 62)
?tryCatch
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Base_from conversion ----
if(base_from != 10){
}
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(13, base_to = 2)
pigeon_dozenal(14, base_to = 2)
pigeon_dozenal(19, base_to = 12)
nchar
nchar(17)
nchar(170)
nchar(170.0)
nchar(1700)
nchar(1700.01)
nchar(1700.1)
nchar(17001)
nchar(1701)
nchar(171)
nchar(17)
x_temp <- NA_integer_
x_temp <- x_temp + 1
x_temp <- x_temp + 1
x_temp <- NULL
x_temp <- x_temp + 1
rm(x_temp)
x_temp <- x_temp + 1
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Base_from conversion ----
if(base_from < 10){
x_convert <- strsplit(x, "")
x_temp <- 0
for(j in seq(length(x_convert))){
x_temp <- (as.integer(x_convert[j]) * base_from) + x_temp
}
x <- x_temp + as.integer(x_convert[j])
} else if( base_from > 10 & base_from <= 62){
### Substitute + convert to decimal for bases > 10
}
x <- as.integer(x)
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(1101, base_from = 2, base_to = 10)
base_from = 2
x = 1101
base_from < 10
x_convert <- strsplit(x, "")
x_convert <- strsplit(as.character(x), "")
x_convert
x_convert[1]
x_convert[2]
x_convert[1]
x_convert <- strsplit(as.character(x), "")
unlist(x_convert)
unlist(x_convert)[1]
unlist(x_convert)[3]
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Base_from conversion ----
if(base_from < 10){
x_convert <- unlist(strsplit(as.character(x), ""))
x_temp <- 0
for(j in seq(length(x_convert))){
x_temp <- (as.integer(x_convert[j]) * base_from) + x_temp
}
x <- x_temp + as.integer(x_convert[j])
} else if( base_from > 10 & base_from <= 62){
### Substitute + convert to decimal for bases > 10
}
x <- as.integer(x)
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(1101, base_from = 2, base_to = 10)
length(0:9)
seq(11,11)
seq(11,12)
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
subdigits_62[10]
subdigits_62[11]
subdigits_62[11:12]
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
#### Base_from conversion ----
if(base_from != 10){
x_convert <- unlist(strsplit(as.character(x), ""))
x_temp <- 0
if( base_from > 10 & base_from <= 62){
### Substitute + convert to decimal for bases > 10
if(base_from == 12){
x_convert <- gsub("X", 10, x_convert)
x_convert <- gsub("E", 11, x_convert)
} else if(base_from <= 62) {
for(k in seq(10, base_from) ){
x_convert <- gsub(subdigits_62[k+1], k, x_convert)
}
}
}
for(j in seq(length(x_convert))){
x_temp <- (as.integer(x_convert[j]) * base_from) + x_temp
}
x <- x_temp + as.integer(x_convert[j])
}
x <- as.integer(x)
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(1101, base_from = 2, base_to = 10)
pigeon_dozenal(11, base_from = 2, base_to = 10)
pigeon_dozenal(1, base_from = 2, base_to = 10)
pigeon_dozenal(0, base_from = 2, base_to = 10)
pigeon_dozenal(1, base_from = 2, base_to = 10)
pigeon_dozenal(10, base_from = 2, base_to = 10)
pigeon_dozenal(11, base_from = 2, base_to = 10)
pigeon_dozenal(100, base_from = 2, base_to = 10)
pigeon_dozenal(100, base_from = 10, base_to = 12)
x = 100
base_from = 2
x_convert <- unlist(strsplit(as.character(x), ""))
x_temp <- 0
seq(length(x_convert))
j = 1
x_temp <- (as.integer(x_convert[j]) * base_from) + x_temp
j = 2
x_temp <- (as.integer(x_convert[j]) * base_from) + x_temp
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() as a step
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
# TODO: Dictionary for bases > 62
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
# Creating generic vector for 10 < baseX <= 62
subdigits_62 <- c(0:9, LETTERS, letters)
#### Base_from conversion ----
if(base_from != 10){
x_convert <- unlist(strsplit(as.character(x), ""))
x_temp <- 0
if( base_from > 10 & base_from <= 62){
### Substitute + convert to decimal for bases > 10
if(base_from == 12){
x_convert <- gsub("X", 10, x_convert)
x_convert <- gsub("E", 11, x_convert)
} else if(base_from <= 62) {
for(k in seq(10, base_from) ){
x_convert <- gsub(subdigits_62[k+1], k, x_convert)
}
}
}
for(j in seq(length(x_convert) - 1)){
x_temp <- ((as.integer(x_convert[j]) + x_temp) * base_from)
}
x <- x_temp + as.integer(x_convert[j+1])
}
x <- as.integer(x)
#### Actual Conversion processes (base_from = 10 to base_to positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# Substituting the notation for base_to
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
# Creating the "10" for every base
OUT <- gsub(base_to, "10", OUT)
# Collapsing the vector to a single value
OUT <- paste0(OUT, collapse = "")
#### Return ----
return(OUT)
}
pigeon_dozenal(100, base_from = 2, base_to = 10)
pigeon_dozenal(1101, base_from = 2, base_to = 10)
pigeon_dozenal(1101, base_from = 3, base_to = 10)
pigeon_dozenal(1101, base_from = 3, base_to = 12)
pigeon_dozenal(1101, base_from = 2, base_to = 12)
MASS::fractions(.25)
pigeon_dozenal(17)
pigeon_dozenal(18)
17/18
