OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(144)
pigeon_dozenal(12)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Fractions using MASS::fractions() to help
# TODO: Dictionaries for conversion for other bases
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(12)
pigeon_dozenal(144)
pigeon_dozenal(145)
pigeon_dozenal(148)
pigeon_dozenal(156)
pigeon_dozenal(166)
pigeon_dozenal(167)
pigeon_dozenal(1256)
pigeon_dozenal(2789)
subdigits <- c(0:9, LETTERS, letters)
subdigits
?pigeon_dozenal
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to = 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
} else if(base_to = 16){
} else if(base_to = 20){
} else if( base_to = 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
} else if(base_to = 16){
} else if(base_to = 20){
} else if( base_to = 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
} else if(base_to == 16){
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(12)
pigeon_dozenal(12, base_to = 2)
pigeon_dozenal(2, base_to = 2)
pigeon_dozenal(5, base_to = 2)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to == 16){
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(2, base_to = 2)
pigeon_dozenal(5, base_to = 2)
pigeon_dozenal(128, base_to = 2)
pigeon_dozenal(333, base_to = 3)
pigeon_dozenal(3327, base_to = 3)
pigeon_dozenal(27, base_to = 3)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to == 16){
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to == 16){
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, LETTERS[i-base_from+1], OUT)
}
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(16,base_to = 16)
pigeon_dozenal(15, base_to = 16)
pigeon_dozenal(10, base_to = 16)
pigeon_dozenal(176, base_to = 16)
pigeon_dozenal(192, base_to = 16)
pigeon_dozenal(256, base_to = 16)
pigeon_dozenal(255, base_to = 16)
pigeon_dozenal(235, base_to = 16)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if( base_to == 60){
} else if(base_to > 10 & base_to < 36) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, LETTERS[i-base_from+1], OUT)
}
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(235, base_to = 16)
pigeon_dozenal(256, base_to = 16)
pigeon_dozenal(256, base_to = 17)
pigeon_dozenal(16, base_to = 17)
pigeon_dozenal(19, base_to = 20)
pigeon_dozenal(190, base_to = 20)
pigeon_dozenal(400, base_to = 20)
pigeon_dozenal(500, base_to = 20)
pigeon_dozenal(600, base_to = 20)
pigeon_dozenal(700, base_to = 20)
pigeon_dozenal(799, base_to = 20)
pigeon_dozenal(999, base_to = 20)
pigeon_dozenal(999999999999, base_to = 20)
pigeon_dozenal(9999999999996, base_to = 20)
pigeon_dozenal(9999999999996, base_to = 19)
pigeon_dozenal(9999999999996, base_to = 12)
pigeon_dozenal(9999999999996, base_to = 10)
pigeon_dozenal(9999999999996, base_to = 9)
pigeon_dozenal(9999999999996, base_to = 2)
pigeon_dozenal(9999999999996, base_to = 1)
pigeon_dozenal(9999999999996, base_to = 2)
subdigits_62 <- c(0:9, LETTERS, letters)
length(subdigits_62)
subdigits_62
subdigits_62[10]
subdigits_62[11]
subdigits_62[62]
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
#### Actual Conversion processes (baseX to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
subdigits_62 <- c(0:9, LETTERS, letters)
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to < 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(9999999999996, base_to = 2)
pigeon_dozenal(9999999999996, base_to = 22)
pigeon_dozenal(9999999999996, base_to = 60)
pigeon_dozenal(59, base_to = 60)
pigeon_dozenal(60, base_to = 60)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & (base_to = 12 or base_to <= 10)
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
# TODO: Error catching (e.g. base_to = 1, unknown bases, not ready functions,
#       not numbers given for bases, larger base than we have notation for...)
# TODO: Make it pipeable
#### Actual Conversion processes (baseX to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
subdigits_62 <- c(0:9, LETTERS, letters)
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to > 10 & base_to <= 62) {
for(i in seq(base_from, base_to - 1) ){
OUT <- gsub(i, subdigits_62[i+1], OUT)
}
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(60, base_to = 60)
pigeon_dozenal(60, base_to = 62)
pigeon_dozenal(61, base_to = 62)
pigeon_dozenal(62, base_to = 62)
