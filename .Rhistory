} else {
OUT <- quotient
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- quotient / base_to
}
OUT[i] <- quotient
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- paste0(OUT)
return(OUT)
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- quotient / base_to
}
OUT[i] <- quotient
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- paste0(OUT)
return(OUT)
}
pigeon_dozenal(12)
pigeon_dozenal(15)
pigeon_dozenal(24)
pigeon_dozenal(13)
pigeon_dozenal(145)
base_from = 10
base_to = 12
x = 13
i <- 1
OUT <- c()
quotient <- x
quotient >= base_to
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- quotient / base_to
}
OUT
OUT[i] <- quotient
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- integer(quotient / base_to)
}
OUT[i] <- integer(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- paste0(OUT)
return(OUT)
}
pigeon_dozenal(13)
trunc(1.08)
trunc(1.88)
trunc(1.9999)
trunc(19.9999)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- paste0(OUT)
return(OUT)
}
pigeon_dozenal(13)
paste0(pigeon_dozenal(13))
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(13)
pigeon_dozenal(12)
pigeon_dozenal(11)
pigeon_dozenal(12)
pigeon_dozenal(120)
pigeon_dozenal(144)
pigeon_dozenal(132)
pigeon_dozenal(144)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "1", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(144)
pigeon_dozenal(132)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# MASS::fractions() as part of the later solution for adding decimal points
i <- 1
OUT <- c()
quotient <- x
if(quotient >= base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(144)
pigeon_dozenal(12)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Fractions using MASS::fractions() to help
# TODO: Dictionaries for conversion for other bases
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(12)
pigeon_dozenal(144)
pigeon_dozenal(145)
pigeon_dozenal(148)
pigeon_dozenal(156)
pigeon_dozenal(166)
pigeon_dozenal(167)
pigeon_dozenal(1256)
pigeon_dozenal(2789)
subdigits <- c(0:9, LETTERS, letters)
subdigits
?pigeon_dozenal
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to = 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
} else if(base_to = 16){
} else if(base_to = 20){
} else if( base_to = 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
} else if(base_to = 16){
} else if(base_to = 20){
} else if( base_to = 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
OUT <- gsub(12, "10", OUT)
} else if(base_to == 16){
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(12)
pigeon_dozenal(12, base_to = 2)
pigeon_dozenal(2, base_to = 2)
pigeon_dozenal(5, base_to = 2)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to == 16){
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
pigeon_dozenal(2, base_to = 2)
pigeon_dozenal(5, base_to = 2)
pigeon_dozenal(128, base_to = 2)
pigeon_dozenal(333, base_to = 3)
pigeon_dozenal(3327, base_to = 3)
pigeon_dozenal(27, base_to = 3)
#' Converts base10 integers to base12
#' Currently only works with base_from = 10 & base_to =12 but additionals later
#' No fractions yet
#'
#' @param x
#' @param base_from
#' @param base_to
pigeon_dozenal <- function(x, base_from = 10, base_to = 12){
# TODO: Dictionaries for conversion for other (common) bases [12, 16, 20, 60]
# TODO: Dictionary for uncommon bases c(0:9,Letters,letters, ?unicode)
# TODO: Vectorize the digit subs
# TODO: From any base to any base (using base 10 as an intermediary)
# TODO: Fractions using MASS::fractions() to help
# TODO: Allow user to add in custom dictionaries for to/from digitsubs
# TODO: Weird base systems (balanced, negative, complex, etc.)
#### Actual Conversion processes (base12 to base10 positional) ----
i <- 1
OUT <- c()
quotient <- x
if(quotient > base_to){
while(quotient > base_to){
OUT[i] <- quotient %% base_to
i <- i + 1
quotient <- trunc(quotient / base_to)
}
OUT[i] <- trunc(quotient)
OUT <- rev(OUT)
} else {
OUT <- quotient
}
#### Subbing out base system numbers ----
# base12 subs
if(base_to == 12){
OUT <- gsub(10, "X", OUT)
OUT <- gsub(11, "E", OUT)
} else if(base_to == 16){
} else if(base_to == 20){
} else if( base_to == 60){
} else{
subdigits <- c(0:9, LETTERS, letters) # TODO: use unicode for bases > 62
}
OUT <- gsub(base_to, "10", OUT)
OUT <- paste0(OUT, collapse = "")
return(OUT)
}
